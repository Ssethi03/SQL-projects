Q1. What is the total amount each customer spent at the restaurant?

SELECT `dannys-diner-394605.sales.sales_diner`.customer_id,sum(`dannys-diner-
394605.menu.menu_diner`.price) as totalspent
FROM `dannys-diner-394605.menu.menu_diner`
join `dannys-diner-394605.sales.sales_diner`
on `dannys-diner-394605.menu.menu_diner`.product_id=`dannys-diner-
394605.sales.sales_diner`.product_id
group by `dannys-diner-394605.sales.sales_diner`.customer_id

Q2. How many days has each customer visited the restaurant?

SELECT customer_id,count(distinct order_date) as numberofdays
FROM `dannys-diner-394605.sales.sales_diner`
group by customer_id

Q3. What was the first item from the menu purchased by each customer?

with final as (
SELECT a.*,b.product_name,
rank() over (partition by customer_id order by order_date) as ranking
FROM `dannys-diner-394605.sales.sales_diner` a
join `dannys-diner-394605.menu.menu_diner` b
on a.product_id=b.product_id)
select * from final where ranking=1

Q4. What is the most purchased item on the menu and how many times was it purchased 
by all customers?

SELECT b.product_name,count(*)
FROM `dannys-diner-394605.menu.menu_diner` b
join `dannys-diner-394605.sales.sales_diner` a
on b.product_id=a.product_id
group by b.product_name

Q5. Which item was the most popular for each customer?
with final as (
SELECT a.product_name,b.customer_id,count(*) as total
FROM `dannys-diner-394605.menu.menu_diner` a
join `dannys-diner-394605.sales.sales_diner` b
on a.product_id=b.product_id
group by a.product_name,b.customer_id)
select product_name,customer_id,total,
 rank() over(partition by customer_id order by total desc) as ranking
 from final 

Q6. Which item was purchased first by the customer after they became a member?

with final as (
  SELECT a.* ,b.order_date,c.product_name,
  rank() over(partition by b.customer_id order by order_date asc) as ranking
FROM `dannys-diner-394605.members.member_danny` a
join `dannys-diner-394605.sales.sales_diner` b 
on a.customer_id=b.customer_id
join `dannys-diner-394605.menu.menu_diner` c
on b.product_id=c.product_id
where b.order_date>=a.join_date)
select *
from final
where ranking=1

Q7. Which item was purchased just before the customer became a member?
with final as(
    SELECT a.* ,b.order_date,c.product_name,
  rank() over(partition by b.customer_id order by order_date asc) as ranking
FROM `dannys-diner-394605.members.member_danny` a
join `dannys-diner-394605.sales.sales_diner` b 
on a.customer_id=b.customer_id
join `dannys-diner-394605.menu.menu_diner` c
on b.product_id=c.product_id
where b.order_date<a.join_date)
select * from final where ranking=1

Q8. What is the total items and amount spent for each member before they became a 
member?

with totalmembers as (
  select a.customer_id,a.join_date,b.order_date,c.product_name,c.price
 from `dannys-diner-394605.members.member_danny` a
join `dannys-diner-394605.sales.sales_diner` b
on a.customer_id=b.customer_id
join `dannys-diner-394605.menu.menu_diner` c
on b.product_id=c.product_id
where b.order_date<a.join_date)
select customer_id,sum(price),count(distinct product_name)
from totalmembers
group by customer_id

Q9. If each $1 spent equates to 10 points and sushi has a 2x points multiplier - 
how many points would each customer have?

with points as (SELECT a.customer_id,b.product_name,b.price,
 case when b.product_name='sushi'then 2*b.price
 else b.price end as newprice
FROM `dannys-diner-394605.sales.sales_diner` a
join `dannys-diner-394605.menu.menu_diner` b
on a.product_id=b.product_id)
select customer_id, sum(newprice)*10 as totalprice
from points
group by customer_id

Q10. In the first week after a customer joins the program (including their join 
date) they earn 2x points on all items, not just sushi - how many points do 
customer A and B have at the end of January?

with finalpoints as (
  select a.*,b.order_date,c.product_name,
 case when b.order_date between a.join_date
 and (a.join_date+interval 6 day) then 2*c.price
 else c.price end as newprice
 from `dannys-diner-394605.members.member_danny` a
left join `dannys-diner-394605.sales.sales_diner` b
on a.customer_id=b.customer_id
join `dannys-diner-394605.menu.menu_diner` c
on b.product_id=c.product_id
where b.order_date<='2021-01-31')
select customer_id,sum(newprice) as totalpoints
from finalpoints
group by customer_id


select a.customer_id,a.order_date,b.product_name,b.price,
case when a.order_date<c.join_date then 'N'
when c.join_date is null then 'N'
else 'Y' end as member
FROM `dannys-diner-394605.sales.sales_diner` a
join `dannys-diner-394605.menu.menu_diner` b
on a.product_id=b.product_id
left join `dannys-diner-394605.members.member_danny` c
on a.customer_id=c.customer_id

with ranking as(
  select a.customer_id,a.order_date,b.product_name,b.price,
case when a.order_date<c.join_date then 'N'
when c.join_date is null then 'N'
else 'Y' end as member,
FROM `dannys-diner-394605.sales.sales_diner` a
join `dannys-diner-394605.menu.menu_diner` b
on a.product_id=b.product_id
left join `dannys-diner-394605.members.member_danny` c
on a.customer_id=c.customer_id)

select *,
case when member='N' then null
else
rank()over(partition by member,customer_id order by order_date) end as rankcalc 
from ranking


