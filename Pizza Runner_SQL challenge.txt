Pizza Runner- SQL Challenge1. What are the standard ingredients for each pizza?with ingredients as (SELECT b.pizza_id,cast(topping_id as INT64) as topping_id,a.pizza_nameFROM `dannys-diner-394605.pizza.pizza_recipes`b ,unnest (split(toppings,',')) as topping_idinner join `dannys-diner-394605.pizza.pizza_names` aon a.pizza_id=b.pizza_id)select  c.topping_namefrom ingredients ijoin `dannys-diner-394605.pizza.pizza_toppings`con i.topping_id =c.topping_idgroup by c.topping_namehaving count(distinct pizza_id)=22. What was the most commonly added extra?SELECT b.topping_name, count(pizza_id) as added_extraFROM `dannys-diner-394605.pizza.customer_orders` a,unnest (split(extras,',')) as valuejoin `dannys-diner-394605.pizza.pizza_toppings` b  on cast(value as INT64)=b.topping_idWHERE value <> 'null'  AND SAFE_CAST(value AS INT64) > 0  group by b.topping_name3. What was the most common exclusion?SELECT b.topping_name, count(pizza_id) as exclusionFROM `dannys-diner-394605.pizza.customer_orders` a,unnest (split(exclusions,','))join `dannys-diner-394605.pizza.pizza_toppings` bon safe_cast(exclusions as int64)=b.topping_idwhere exclusions<>'null'and safe_cast(exclusions as int64) is not nullgroup by b.topping_name4. Generate an order item for each record in the customers_orders table in the format of one of the following:o Meat Loverso Meat Lovers - Exclude Beefo Meat Lovers - Extra Bacono Meat Lovers - Exclude Cheese, Bacon - Extra Mushroom, Pepperswith extras as (SELECT a.order_id, a.pizza_id,a.extras,string_agg(distinct b.topping_name, ",") as added_extraFROM `dannys-diner-394605.pizza.customer_orders` a,unnest (split(extras,',')) as valuejoin `dannys-diner-394605.pizza.pizza_toppings` b  on cast(value as INT64)=b.topping_idWHERE value <> 'null'  AND SAFE_CAST(value AS INT64) > 0  group by a.order_id, a.pizza_id, a.extras), excluded as (SELECT a.order_id, a.pizza_id,a.exclusions,string_agg(distinct b.topping_name, ",") as excludedFROM `dannys-diner-394605.pizza.customer_orders` a,unnest (split(exclusions,',')) as valuejoin `dannys-diner-394605.pizza.pizza_toppings` b  on cast(value as INT64)=b.topping_idWHERE value <> 'null'  AND SAFE_CAST(value AS INT64) > 0  group by a.order_id, a.pizza_id, a.exclusions)select a.order_id,concat (case when p.pizza_name='Meat Lovers' then 'Meat  Lovers' else p.pizza_name end, coalesce('- Extra  ' || added_extra, ''),coalesce('- Exclude  ' || excluded, '') ) as order_detailsfrom `dannys-diner-394605.pizza.customer_orders` aleft join extras as ext on ext.order_id=a.order_id and ext.pizza_id=a.pizza_id and ext.extras=a.extrasleft join excluded as exc on exc.order_id=a.order_id and exc.pizza_id=a.pizza_id and exc.exclusions=a.exclusionsinner join `dannys-diner-394605.pizza.pizza_names` pon p.pizza_id=a.pizza_id5. Generate an alphabetically ordered comma separated ingredient list for each pizza order from the customer_orders table and add a 2x in front of any relevant ingredientso For example: "Meat Lovers: 2xBacon, Beef, ... , Salami"with extras as (SELECT a.order_id, a.pizza_id,a.extras,b.topping_id,b.topping_name FROM `dannys-diner-394605.pizza.customer_orders` a,unnest (split(extras,',')) as valuejoin `dannys-diner-394605.pizza.pizza_toppings` b  on cast(value as INT64)=b.topping_idWHERE value <> 'null'  AND SAFE_CAST(value AS INT64) > 0), excluded as (SELECT a.order_id, a.pizza_id,a.exclusions,b.topping_id,b.topping_name as excludedFROM `dannys-diner-394605.pizza.customer_orders` a,unnest (split(exclusions,',')) as valuejoin `dannys-diner-394605.pizza.pizza_toppings` b  on cast(value as INT64)=b.topping_idWHERE value <> 'null'  AND SAFE_CAST(value AS INT64) > 0), orders as (  select a.order_id,a.pizza_id,cast(topping_id as INT64) as topping_id, topping_name  from `dannys-diner-394605.pizza.customer_orders` a  inner join `dannys-diner-394605.pizza.pizza_recipes` b  on a.pizza_id=b.pizza_id,  unnest (split(toppings,',')) as toppping_id  inner join `dannys-diner-394605.pizza.pizza_toppings` c  on c.topping_id= cast(topping_id as INT64)), orders_as_extras_and_exclusions as (select o.order_id,o.pizza_id,o.topping_id,topping_name from orders oleft join excluded as exc on exc.order_id=o.order_id and exc.pizza_id=o.pizza_id and exc.topping_id=o.topping_id where exc.topping_id is nullunion allselect order_id,pizza_id,topping_id,topping_namefrom extras), ingredients_total as (select O.order_id,pn.pizza_name, O.topping_name, count(topping_id) as nfrom orders_as_extras_and_exclusions Oinner join `dannys-diner-394605.pizza.pizza_names` pnon pn.pizza_id=O.pizza_idgroup by order_id,topping_name,pn.pizza_nameorder by O.order_id,pn.pizza_name, O.topping_name ), summary as (select order_id, pizza_name,string_agg(distinct case when n>1 then n || 'x' || topping_name else topping_name end, ',') as ingred from ingredients_totalgroup by order_id, pizza_name)select order_id, concat((case when pizza_name= 'Meat Lovers' then 'Meat. Lovers' else pizza_name end),': ',ingred) as ingredient_listfrom summary6. What is the total quantity of each ingredient used in all delivered pizzas sorted by most frequent first?with extras as (SELECT a.order_id, a.pizza_id,a.extras,b.topping_id,b.topping_name FROM `dannys-diner-394605.pizza.customer_orders` a,unnest (split(extras,',')) as valuejoin `dannys-diner-394605.pizza.pizza_toppings` b  on cast(value as INT64)=b.topping_idWHERE value <> 'null'  AND SAFE_CAST(value AS INT64) > 0), excluded as (SELECT a.order_id, a.pizza_id,a.exclusions,b.topping_id,b.topping_name as excludedFROM `dannys-diner-394605.pizza.customer_orders` a,unnest (split(exclusions,',')) as valuejoin `dannys-diner-394605.pizza.pizza_toppings` b  on cast(value as INT64)=b.topping_idWHERE value <> 'null'  AND SAFE_CAST(value AS INT64) > 0), orders as (  select a.order_id,a.pizza_id,cast(topping_id as INT64) as topping_id, topping_name  from `dannys-diner-394605.pizza.customer_orders` a  inner join `dannys-diner-394605.pizza.pizza_recipes` b  on a.pizza_id=b.pizza_id,  unnest (split(toppings,',')) as toppping_id  inner join `dannys-diner-394605.pizza.pizza_toppings` c  on c.topping_id= cast(topping_id as INT64)), orders_as_extras_and_exclusions as (select o.order_id,o.pizza_id,o.topping_id,topping_name from orders oleft join excluded as exc on exc.order_id=o.order_id and exc.pizza_id=o.pizza_id and exc.topping_id=o.topping_id where exc.topping_id is nullunion allselect order_id,pizza_id,topping_id,topping_namefrom extras)select topping_name,count(topping_id) as nfrom orders_as_extras_and_exclusions oinner join `dannys-diner-394605.pizza.runner_orders`ron o.order_id=r.order_idwhere cancellation is nullor cancellation='null'or cancellation='NaN'or cancellation=''group by topping_nameorder by count(topping_id) desc